<?xml version="1.0" encoding="UTF-8"?>
<model version="5.0.1" links="0">
 <framework name="qpcpp"/>
 <package name="DatabaseSM" stereotype="0x02" namespace="DATABASE_SM">
  <class name="CDatabaseSM" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="CDatabaseSM" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;CDatabaseSM::initial)),
    m_timeEvt(this, TIMEOUT_SIG)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>subscribe(HW_UPDATE_SENSOR_SIG);
subscribe(HW_ADD_SENSOR_SIG);
subscribe(HW_REMOVE_SENSOR_SIG);
subscribe(APP_SET_TRESHOLD_SIG);
subscribe(APP_GET_SENSORS_SIG);
subscribe(APP_SENSOR_SETTINGS_SIG);
subscribe(DB_CREATED_SIG);
subscribe(DB_CB_GET_SENSORS_SIG);
subscribe(DB_CB_ADD_SENSOR_SIG);
subscribe(DB_ERR_SIG);</action>
     <initial_glyph conn="2,2,4,3,24,4">
      <action box="0,-2,34,21"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <entry>DATABASE_LOG_DEBUG(&quot;Wait for event&quot;);
if(!DatabaseManagerN::isOpened()) {
    DatabaseManagerN::createDB(DB_NAME);
}</entry>
     <tran trig="HW_ADD_SENSOR" target="../../3">
      <action>DatabaseManagerN::addNewSensor(Q_EVT_CAST(HWAddSensor)-&gt;m_title, Q_EVT_CAST(HWAddSensor)-&gt;m_type);</action>
      <tran_glyph conn="6,42,3,3,44,28,24">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <tran trig="HW_REMOVE_SENSOR" target="../../3">
      <action>DatabaseManagerN::removeSensor(Q_EVT_CAST(HWRemoveSensor)-&gt;m_id);</action>
      <tran_glyph conn="6,48,3,3,44,22,24">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <tran trig="HW_UPDATE_SENSOR" target="../../3">
      <action>DatabaseManagerN::updateSensorValue(Q_EVT_CAST(HWSensorValueUpdate)-&gt;m_id, Q_EVT_CAST(HWSensorValueUpdate)-&gt;m_value);</action>
      <tran_glyph conn="6,36,3,3,44,34,24">
       <action box="0,-2,17,3"/>
      </tran_glyph>
     </tran>
     <tran trig="APP_SET_TRESHOLD" target="../../3">
      <tran_glyph conn="6,54,3,3,44,16,24">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <tran trig="APP_GET_SENSORS" target="../../3">
      <tran_glyph conn="6,60,3,3,44,10,24">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <tran trig="APP_SENSOR_SETTINGS" target="../../3">
      <tran_glyph conn="6,66,3,3,44,4,24">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,22,38,46">
      <entry box="1,2,33,10"/>
     </state_glyph>
    </state>
    <state name="allarm">
     <entry>m_timeEvt.armX(ALLARM_TICKS*2, ALLARM_TICKS);</entry>
     <tran trig="TIMEOUT">
      <choice target="../../../1">
       <guard>!DatabaseManagerN::isAllarm()</guard>
       <action>m_timeEvt.disarm();</action>
       <choice_glyph conn="68,37,4,1,-11,-24">
        <action box="-23,-10,24,5"/>
       </choice_glyph>
      </choice>
      <choice target="../..">
       <guard>else</guard>
       <action>QP::QF::PUBLISH(Q_NEW(QP::QEvt, SYSTEM_ALLARM_SIG), nullptr);</action>
       <choice_glyph conn="68,37,4,3,11,6">
        <action box="0,8,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="104,37,1,-1,-36">
       <action box="-11,-2,11,2"/>
      </tran_glyph>
     </tran>
     <tran trig="HW_UPDATE_SENSOR">
      <action>//DatabaseManagerN::updateSensorValue(m_id, m_value);    </action>
      <tran_glyph conn="104,43,1,-1,-21">
       <action box="-19,-2,22,2"/>
      </tran_glyph>
     </tran>
     <tran trig="HW_REMOVE_SENSOR">
      <action>//DatabaseManagerN::removeSensor(e-&gt;m_id);</action>
      <tran_glyph conn="104,49,1,-1,-21">
       <action box="-19,-2,19,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,22,30,34">
      <entry box="1,2,29,7"/>
     </state_glyph>
    </state>
    <state name="callbackWaiting">
     <documentation>DATABASE_LOG_DEBUG(&quot;Callback waiting&quot;);</documentation>
     <entry>DATABASE_LOG_DEBUG(&quot;Callback waiting&quot;);</entry>
     <tran trig="DB_CB_GET_SENSORS" target="../../1">
      <tran_glyph conn="104,82,1,0,2,-62,-64,2">
       <action box="-18,-2,17,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DB_CB_ADD_SENSOR" target="../../1">
      <tran_glyph conn="104,86,1,0,2,-66,-64,2">
       <action box="-18,-2,19,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DB_ERR" target="../../4">
      <tran_glyph conn="104,90,1,1,-60">
       <action box="-10,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SYSTEM_ALLARM" target="../../2">
      <tran_glyph conn="104,64,1,3,-36,-16,6">
       <action box="-16,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,58,30,34">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="createNewDB">
     <entry>DatabaseManagerN::resetDB(DB_NAME);
this-&gt;POST(Q_NEW(QP::QEvt, DB_CREATED_SIG), this);</entry>
     <tran trig="DB_CREATED" target="../../1">
      <tran_glyph conn="6,90,3,3,-4,-62,4">
       <action box="0,-1,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,72,38,21">
      <entry box="1,2,37,6"/>
     </state_glyph>
    </state>
    <state_diagram size="132,103"/>
   </statechart>
  </class>
 </package>
 <directory name="../">
  <directory name="include">
   <directory name="qp">
    <file name="database_sm.hpp">
     <text>#pragma once
#include &quot;qpcpp.hpp&quot;
#include &quot;qp/backend_events.hpp&quot;

#define DB_NAME &quot;backend.db&quot;

$declare(DatabaseSM::CDatabaseSM)</text>
    </file>
   </directory>
  </directory>
  <directory name="sources">
   <directory name="qp">
    <file name="database_sm.cpp">
     <text>#include &quot;qp/database_sm.hpp&quot;
#include &quot;database/database_manager.hpp&quot;
#include &quot;qp/backend_events.hpp&quot;
#include &quot;logger/logger_api.hpp&quot;

#define DATABASE_PREF &quot;QP Database:&quot;
#define DATABASE_LOG_ERROR(fmt, ...) CLogger::getLogger()-&gt;msgToLog(log_err, DATABASE_PREF fmt, ##__VA_ARGS__)
#define DATABASE_LOG_DEBUG(fmt, ...) CLogger::getLogger()-&gt;msgToLog(log_dbg, DATABASE_PREF fmt, ##__VA_ARGS__)
#define DATABASE_LOG_INFO(fmt, ...) CLogger::getLogger()-&gt;msgToLog(log_info, DATABASE_PREF fmt, ##__VA_ARGS__)
#define DATABASE_LOG_TRACE(fmt, ...) CLogger::getLogger()-&gt;msgToLog(log_trace, DATABASE_PREF fmt, ##__VA_ARGS__)


$define(DatabaseSM::CDatabaseSM)</text>
    </file>
   </directory>
  </directory>
 </directory>
</model>
